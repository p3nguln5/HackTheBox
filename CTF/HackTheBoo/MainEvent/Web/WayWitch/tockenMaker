
            function getCookie(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(";").shift();
            }

            async function generateJWT() {
                const existingToken = getCookie("session_token");

                if (existingToken) {
                    console.log("Session token already exists:", existingToken);
                    return;
                }

                const randomNumber = Math.floor(Math.random() * 10000);
                const guestUsername = "guest_" + randomNumber;

                const header = {
                    alg: "HS256",
                    typ: "JWT",
                };

                const payload = {
                    username: guestUsername,
                    iat: Math.floor(Date.now() / 1000),
                };

                const secretKey = await crypto.subtle.importKey(
                    "raw",
                    new TextEncoder().encode("halloween-secret"),
                    { name: "HMAC", hash: "SHA-256" },
                    false,
                    ["sign"],
                );

                const headerBase64 = btoa(JSON.stringify(header))
                    .replace(/\+/g, "-")
                    .replace(/\//g, "_")
                    .replace(/=+$/, "");
                const payloadBase64 = btoa(JSON.stringify(payload))
                    .replace(/\+/g, "-")
                    .replace(/\//g, "_")
                    .replace(/=+$/, "");

                const dataToSign = `${headerBase64}.${payloadBase64}`;
                const signatureArrayBuffer = await crypto.subtle.sign(
                    { name: "HMAC" },
                    secretKey,
                    new TextEncoder().encode(dataToSign),
                );

                const signatureBase64 = btoa(
                    String.fromCharCode.apply(
                        null,
                        new Uint8Array(signatureArrayBuffer),
                    ),
                )
                    .replace(/\+/g, "-")
                    .replace(/\//g, "_")
                    .replace(/=+$/, "");

                const token = `${dataToSign}.${signatureBase64}`;

                document.cookie = `session_token=${token}; path=/; max-age=${60 * 60 * 24}; Secure`;

                console.log("Generated JWT Session Token:", token);
            }

            document
                .getElementById("submit-btn")
                .addEventListener("click", async (event) => {
                    event.preventDefault();

                    const name = document.getElementById("ticket-name").value;
                    const description =
                        document.getElementById("ticket-desc").value;

                    const response = await fetch("/submit-ticket", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ name, description }),
                    });

                    const result = await response.json();
                    document.getElementById("message-display").textContent =
                        result.message
                            ? result.message
                            : "Ticket submitted successfully!";
                });

            window.addEventListener("load", generateJWT);
        
